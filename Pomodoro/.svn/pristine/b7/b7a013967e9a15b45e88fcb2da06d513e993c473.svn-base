package vn.edu.techkids.pomodoro;

import android.app.FragmentManager;
import android.content.Context;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.View;
import android.widget.AdapterView;
import android.widget.FrameLayout;
import android.widget.ListView;
import android.widget.Toast;

import vn.edu.techkids.pomodoro.adapter.AdapterListMenu;
import vn.edu.techkids.pomodoro.entity.MenuDrawer;
import vn.edu.techkids.pomodoro.entity.MenuItem;
import vn.edu.techkids.pomodoro.fragments.FragmentSettings;
import vn.edu.techkids.pomodoro.fragments.FragmentTaskSummrary;
import vn.edu.techkids.pomodoro.fragments.FragmentTimer;
import vn.edu.techkids.pomodoro.fragments.ScreenManager;
import vn.edu.techkids.pomodoro.fragments.TaskListContainerFragment;
import vn.edu.techkids.pomodoro.fragments.TaskListFragment;
import vn.edu.techkids.pomodoro.utils.Logger;
import vn.edu.techkids.pomodoro.utils.PreferenceUtils;
import vn.edu.techkids.pomodoro.utils.Utils;

public class MainActivity extends AppCompatActivity implements AdapterView.OnItemClickListener {

    // Context
    private Context mContext;
    private AdapterListMenu mAdapterListMenus;
    private ScreenManager mScreenManager;
    private PreferenceUtils mPreferenceUtils;
    // Layout
    private Toolbar mToolbar;
    private FloatingActionButton mFloatButton;
    private DrawerLayout mDrawerLayout;
    private ActionBarDrawerToggle mDrawerToggle;
    private FrameLayout mFLFragmentContainer;

    private ListView mListMenuDrawer;
    private TaskListContainerFragment mTaskListContainerFragment;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        // Initiate context
        initContext();
        // Initiate layout
        initLayout();
        // Initiate fragment
        mTaskListContainerFragment = new TaskListContainerFragment();
        mScreenManager.openFragment(mTaskListContainerFragment, false);
    }

    /**
     * Initiate context
     */
    private void initContext() {
        mContext = getApplicationContext();
        mAdapterListMenus = new AdapterListMenu(this, MenuDrawer.getListMenuItems());
        mScreenManager = ScreenManager.getInstance(this);
        mPreferenceUtils = new PreferenceUtils(mContext);
    }

    /**
     * Initiate layout
     */
    private void initLayout() {
        // Toolbar
        mToolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(mToolbar);
        // Float button
        mFloatButton = (FloatingActionButton) findViewById(R.id.fab);
        mFloatButton.hide();
        // Drawer layout
        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        mDrawerToggle = new ActionBarDrawerToggle(
                this, mDrawerLayout, mToolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        mDrawerLayout.setDrawerListener(mDrawerToggle);
        mDrawerToggle.syncState();
        // Menu drawer
        mListMenuDrawer = (ListView) findViewById(R.id.list_menu_drawer);
        mListMenuDrawer.setAdapter(mAdapterListMenus);
        mListMenuDrawer.setOnItemClickListener(this);
    }

    @Override
    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
        // Listener for select menu drawer

        // Close menu
        mDrawerLayout.closeDrawer(GravityCompat.START);
        // Update selected position
        mAdapterListMenus.setSelectedIndex(position);
        mAdapterListMenus.notifyDataSetChanged();
        // Handle selected menu
        MenuItem menuItem = (MenuItem) mAdapterListMenus.getItem(position);

        switch (menuItem.getId()) {
            case MenuDrawer.ID_LIST_TASK:
                Logger.i("Open TaskListContainerFragment");
                mTaskListContainerFragment = new TaskListContainerFragment();
                mScreenManager.openFragment(mTaskListContainerFragment);
                break;
            case MenuDrawer.ID_TIMER:
                // Initiate fragment
                Logger.i("Open FragmentTimer");
                FragmentTimer fragmentTimer = new FragmentTimer();
                mScreenManager.openFragment(fragmentTimer);
                break;
            case MenuDrawer.ID_TASK_SUMMARY:
                Logger.i("Open FragmentTaskSummrary");
                FragmentTaskSummrary fragmentTaskSummrary = new FragmentTaskSummrary();
                mScreenManager.openFragment(fragmentTaskSummrary, false);
                break;
            case MenuDrawer.ID_INCOME:
                break;
            case MenuDrawer.ID_SETTING:
                Logger.i("Open FragmentSettings");
                FragmentSettings fragmentSettings = new FragmentSettings();
                mScreenManager.openFragment(fragmentSettings, false);
                break;
            default:
                break;
        }
    }

    @Override
    public void onBackPressed() {
        if (mDrawerLayout.isDrawerOpen(GravityCompat.START)) {
            mDrawerLayout.closeDrawer(GravityCompat.START);
        } else if (mScreenManager.back()) {
            // Back to previous screen success
            // Nothing need to implement
        } else {
            super.onBackPressed();
        }
    }

    /**
     * Get screen manager
     *
     * @return
     */
    public ScreenManager getScreenManager() {
        return mScreenManager;
    }

    /**
     * Get Floating Action button
     *
     * @return FloatingActionButton
     */
    public FloatingActionButton getFloatingActionButton() {
        return mFloatButton;
    }

    public Toolbar getToolbar() {
        return mToolbar;
    }

    public DrawerLayout getDrawerLayout() {
        return mDrawerLayout;
    }

    public void lockDrawer() {
        mDrawerToggle.setDrawerIndicatorEnabled(false);
        mDrawerToggle.setHomeAsUpIndicator(R.drawable.ic_action_back);
        mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);

        mDrawerToggle.setToolbarNavigationClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mScreenManager.back();
            }
        });
    }

    public void unlockDrawer() {
        mDrawerToggle.setDrawerIndicatorEnabled(true);
        mDrawerToggle.setHomeAsUpIndicator(null);
        mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED);

        mDrawerToggle.setToolbarNavigationClickListener(null);
    }

    /**
     * Get PreferenceUtils
     * @return
     */
    public PreferenceUtils getPreferenceUtils() {
        return mPreferenceUtils;
    }
}
